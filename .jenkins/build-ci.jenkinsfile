pipeline {
    agent none
    stages {
        stage('build and update') {
            when {
                anyOf {
                    branch 'develop'
                    branch 'main'
                }
            }
            stages {
                stage('create databases') {
                    agent {
                        label 'vps'
                    }
                    steps {
                        script {
                            if (env.BRANCH_NAME == 'develop') {
                                sh 'docker exec mariadb /bin/bash -c \"mysql -u root --execute=\\"DROP DATABASE IF EXISTS io_develop\\"\"'
                                sh 'docker exec mariadb /bin/bash -c \"mysql -u root --execute=\\"CREATE DATABASE io_develop\\"\"'
                            } else {
                                sh 'docker exec mariadb /bin/bash -c \"mysql -u root --execute=\\"DROP DATABASE IF EXISTS io\\"\"'
                                sh 'docker exec mariadb /bin/bash -c \"mysql -u root --execute=\\"CREATE DATABASE io\\"\"'
                            }
                        }
                        
                        cleanWs()
                    }
                }
                stage('build and update db') {
                    agent {
                        label 'dotnet'
                    }
                    steps {
                        dir('app') {
                            script {
                                if (env.BRANCH_NAME == 'develop') {
                                    sh 'sed -i "s/database=io/database=io_develop/g" appsettings.json'
                                    sh 'sed -i "s/http:\\/\\/localhost:8080/https:\\/\\/develop.szczepienia.pw/g" appsettings.json'
                                } else {
                                    sh 'sed -i "s/http:\\/\\/localhost:8080/https:\\/\\/szczepienia.pw/g" appsettings.json'
                                }
                            }
                            sh 'sed -i "s/localhost/mariadb/g" appsettings.json'
                            sh 'dotnet publish -o out'
                            stash includes: 'out/**', name: 'build'
                            sh 'rm -rf Migrations'
                            sh '/root/.dotnet/tools/dotnet-ef migrations add migration'
                            sh '/root/.dotnet/tools/dotnet-ef database update'
                        }

                        cleanWs()
                    }
                }
                stage('update develop') {
                    agent {
                        label 'vps'
                    }
                    when {
                        branch 'develop'
                    }
                    steps {
                        unstash name: 'build'
                        sh 'echo "stopping backend-develop docker"'
                        sh 'docker stop backend-develop'
                        sh 'rm -rf /home/flatly/apps/dotnet/develop/*'
                        sh 'cp -r ./out/* /home/flatly/apps/dotnet/develop/'
                        sh 'echo "restarting backend-develop docker"'
                        sh 'docker restart backend-develop'
                        cleanWs()
                    }
                }
                stage('update main') {
                    agent {
                        label 'vps'
                    }
                    when {
                        branch 'main'
                    }
                    steps {
                        unstash name: 'build'
                        sh 'echo "stopping backend docker"'
                        sh 'docker stop backend'
                        sh 'rm -rf /home/flatly/apps/dotnet/main/*'
                        sh 'cp -r ./out/* /home/flatly/apps/dotnet/main/'
                        sh 'echo "restarting backend docker"'
                        sh 'docker restart backend'
                        cleanWs()
                    }
                }
            }
        }
    }
}

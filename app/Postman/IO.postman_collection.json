{
	"info": {
		"_postman_id": "b2056712-5266-48f4-9a79-c305153cff7c",
		"name": "IO",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Patient",
			"item": [
				{
					"name": "Vaccination",
					"item": [
						{
							"name": "Reserve vaccination slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"success\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response returned success\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"vaccineId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/patient/vaccination-slots/3",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"patient",
										"vaccination-slots",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show list of available vaccines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"vaccines\": {",
											"      \"type\": \"array\",",
											"      \"items\":",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"disease\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"requiredDoses\": {",
											"              \"type\": \"integer\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"name\",",
											"            \"disease\",",
											"            \"requiredDoses\"",
											"          ]",
											"        },",
											"    },",
											"  },",
											"  \"required\": [",
											"    \"vaccines\"",
											"  ]",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/patient/vaccines?disease=COVID-19",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"patient",
										"vaccines"
									],
									"query": [
										{
											"key": "disease",
											"value": "COVID-19"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get available vaccination slots",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/patient/vaccination-slots",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"patient",
										"vaccination-slots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel vaccination slot",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/patient/vaccination-slots/3",
									"path": [
										"patient",
										"vaccination-slots",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login as a patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"if(jsonData.token) {\r",
									"    pm.globals.set(\"IO_PATIENT_TOKEN\", jsonData.token);\r",
									"}\r",
									"else {\r",
									"    pm.globals.set(\"IO_PATIENT_TOKEN\", \"\");    \r",
									"}\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"patient\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"firstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pesel\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"city\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"zipCode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"street\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"houseNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"localNumber\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"city\",\r",
									"            \"zipCode\",\r",
									"            \"street\",\r",
									"            \"houseNumber\",\r",
									"            \"localNumber\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"firstName\",\r",
									"        \"lastName\",\r",
									"        \"pesel\",\r",
									"        \"email\",\r",
									"        \"address\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"patient\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response structure is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john@patient.com\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/patient/login",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/patient/auth-test",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"auth-test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"firstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"pesel\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"address\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"city\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"zipCode\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"street\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"houseNumber\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"localNumber\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"city\",",
									"        \"zipCode\",",
									"        \"street\",",
									"        \"houseNumber\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"firstName\",",
									"    \"lastName\",",
									"    \"pesel\",",
									"    \"email\",",
									"    \"address\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response structure is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"pesel\": \"59021324123\",\n  \"email\": \"john.doe2@patient.com\",\n  \"password\": \"!Password#123\",\n  \"address\": {\n    \"city\": \"Warszawa\",\n    \"zipCode\": \"01-202\",\n    \"street\": \"Jaktorowska\",\n    \"houseNumber\": \"14\",\n    \"localNumber\": \"5a\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/patient/registration",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"registration"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"firstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"pesel\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"address\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"city\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"zipCode\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"street\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"houseNumber\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"localNumber\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"id\",",
									"        \"city\",",
									"        \"zipCode\",",
									"        \"street\",",
									"        \"houseNumber\",",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"id\",",
									"    \"firstName\",",
									"    \"lastName\",",
									"    \"pesel\",",
									"    \"email\",",
									"    \"address\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response structure is valid\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response data is valid\", () => {",
									"    const requestData = JSON.parse(request.data);",
									"    const responeData = pm.response.json();",
									"    if(requestData.hasOwnProperty(\"firstName\"))",
									"        pm.expect(responeData.firstName).equal(requestData.firstName);",
									"    if(requestData.hasOwnProperty(\"lastName\"))",
									"        pm.expect(responeData.lastName).equal(requestData.lastName);",
									"    if(requestData.hasOwnProperty(\"email\"))",
									"        pm.expect(responeData.email).equal(requestData.email);   ",
									"    if(requestData.hasOwnProperty(\"address\"))",
									"    {",
									"        if(requestData.address.hasOwnProperty(\"city\"))",
									"            pm.expect(responeData.address.city).equal(requestData.address.city);        ",
									"        if(requestData.address.hasOwnProperty(\"zipCode\"))",
									"            pm.expect(responeData.address.zipCode).equal(requestData.address.zipCode); ",
									"        if(requestData.address.hasOwnProperty(\"street\"))",
									"            pm.expect(responeData.address.street).equal(requestData.address.street); ",
									"        if(requestData.address.hasOwnProperty(\"houseNumber\"))",
									"            pm.expect(responeData.address.houseNumber).equal(requestData.address.houseNumber); ",
									"        if(requestData.address.hasOwnProperty(\"localNumber\"))",
									"            pm.expect(responeData.address.localNumber).equal(requestData.address.localNumber); ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John 2\",\n  \"lastName\": \"Doe 2\",\n  \"password\": \"Super-Strong-Password#123\",\n  \"address\": {\n    \"city\": \"Warszawa\",\n    \"zipCode\": \"01-202\",\n    \"street\": \"Jaktorowska\",\n    \"houseNumber\": \"14\",\n    \"localNumber\": \"5a\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/patient/account",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"patient",
								"account"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{IO_PATIENT_TOKEN}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Doctor",
			"item": [
				{
					"name": "Vaccination slots",
					"item": [
						{
							"name": "Create new vaccination slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"success\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"date\": \"2023-04-02T14:15:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show vaccination slots",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"pagination\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"currentPage\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"totalPages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"currentRecords\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"totalRecords\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      }",
											"    },",
											"    \"data\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"date\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"vaccination\": {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"id\": {",
											"                  \"type\": \"integer\"",
											"                },",
											"                \"vaccine\": {",
											"                  \"type\": \"object\",",
											"                  \"properties\": {",
											"                    \"id\": {",
											"                      \"type\": \"integer\"",
											"                    },",
											"                    \"name\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"disease\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"requiredDoses\": {",
											"                      \"type\": \"integer\"",
											"                    }",
											"                  },",
											"                  \"required\": [",
											"                    \"id\",",
											"                    \"name\",",
											"                    \"disease\",",
											"                    \"requiredDoses\"",
											"                  ]",
											"                },",
											"                \"status\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"patient\": {",
											"                  \"type\": \"object\",",
											"                  \"properties\": {",
											"                    \"id\": {",
											"                      \"type\": \"integer\"",
											"                    },",
											"                    \"firstName\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"lastName\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"pesel\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"email\": {",
											"                      \"type\": \"string\"",
											"                    },",
											"                    \"address\": {",
											"                      \"type\": \"object\",",
											"                      \"properties\": {",
											"                        \"id\": {",
											"                          \"type\": \"integer\"",
											"                        },",
											"                        \"city\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"zipCode\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"street\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"houseNumber\": {",
											"                          \"type\": \"string\"",
											"                        },",
											"                        \"localNumber\": {",
											"                          \"type\": \"string\"",
											"                        }",
											"                      },",
											"                      \"required\": [",
											"                        \"id\",",
											"                        \"city\",",
											"                        \"zipCode\",",
											"                        \"street\",",
											"                        \"houseNumber\"",
											"                      ]",
											"                    }",
											"                  },",
											"                  \"required\": [",
											"                    \"id\",",
											"                    \"firstName\",",
											"                    \"lastName\",",
											"                    \"pesel\",",
											"                    \"email\",",
											"                    \"address\"",
											"                  ]",
											"                }",
											"              }",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"date\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots?page=1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "OPTIONAL | default 1"
										},
										{
											"key": "onlyReserved",
											"value": "1",
											"description": "OPTIONAL | 1 - only reserved | 0 - only not reserved",
											"disabled": true
										},
										{
											"key": "startDate",
											"value": "2022-03-18T14:15:00Z",
											"description": "OPTIONAL",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2022-03-20T14:15:00Z",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete vaccination slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"success\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response returned success\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/doctor/vaccination-slots/1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"doctor",
										"vaccination-slots",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login as a doctor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"if(jsonData.token) {\r",
									"    pm.globals.set(\"IO_DOCTOR_TOKEN\", jsonData.token);\r",
									"}\r",
									"else {\r",
									"    pm.globals.set(\"IO_DOCTOR_TOKEN\", \"\");    \r",
									"}\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"doctor\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"firstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"firstName\",\r",
									"        \"lastName\",\r",
									"        \"email\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"doctor\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response structure is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john@doctor.com\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/doctor/login",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"doctor",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/doctor/auth-test",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"doctor",
								"auth-test"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{IO_DOCTOR_TOKEN}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Settings",
					"item": [
						{
							"name": "Get settings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"bugEmail\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"bugEmail\"",
											"  ]",
											"};",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/settings",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"success\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response returned success\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bugEmail\": \"bugEmail@szczepiania.pw\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/settings",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Doctor",
					"item": [
						{
							"name": "Delete doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"success\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response returned success\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors/2",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\"",
											"  ]",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Dr John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@doctor.com\",\n  \"password\": \"!Password#123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\"",
											"  ]",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response data is valid\", () => {",
											"    const requestData = JSON.parse(request.data);",
											"    const responeData = pm.response.json();",
											"    if(requestData.hasOwnProperty(\"firstName\"))",
											"        pm.expect(responeData.firstName).equal(requestData.firstName);",
											"    if(requestData.hasOwnProperty(\"lastName\"))",
											"        pm.expect(responeData.lastName).equal(requestData.lastName);",
											"    if(requestData.hasOwnProperty(\"email\"))",
											"        pm.expect(responeData.email).equal(requestData.email);   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Dr John 2\",\n  \"lastName\": \"Doe 2\",\n  \"email\": \"john.doe2@doctor.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors/1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Doctor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"firstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"lastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"email\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"firstName\",",
											"    \"lastName\",",
											"    \"email\"",
											"  ]",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors/1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Doctors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"pagination\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"currentPage\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"totalPages\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"currentRecords\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"totalRecords\": {",
											"          \"type\": \"integer\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"currentPage\",",
											"        \"totalPages\",",
											"        \"currentRecords\",",
											"        \"totalRecords\"",
											"      ]",
											"    },",
											"    \"data\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"id\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"firstName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"lastName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"email\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"id\",",
											"            \"firstName\",",
											"            \"lastName\",",
											"            \"email\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/doctors?page=1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"doctors"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient",
					"item": [
						{
							"name": "Show Patient",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/patients/1",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show Patients",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"page\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/patients",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Patient",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": {\r\n        \"street\": \"Hoża\"\r\n    },\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/admin/patients/3",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Patient",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{IOHostURL}}/admin/patients/3",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"admin",
										"patients",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login as an admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"if(jsonData.token) {\r",
									"    pm.globals.set(\"IO_ADMIN_TOKEN\", jsonData.token);\r",
									"}\r",
									"else {\r",
									"    pm.globals.set(\"IO_ADMIN_TOKEN\", \"\");    \r",
									"}\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"admin\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"firstName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"email\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"admin\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response structure is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"john@admin.com\",\r\n  \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{IOHostURL}}/admin/login",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{IOHostURL}}/admin/auth-test",
							"host": [
								"{{IOHostURL}}"
							],
							"path": [
								"admin",
								"auth-test"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{IO_ADMIN_TOKEN}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Common",
			"item": [
				{
					"name": "Bugs",
					"item": [
						{
							"name": "Send bug",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"success\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  }",
											"}",
											"",
											"pm.test(\"Response structure is valid\", () => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"Response returned success\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Some bug\",\r\n    \"description\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam erat orci, viverra vitae ex ac, fringilla scelerisque tellus. Maecenas rutrum posuere eros, non ultrices turpis. Praesent rutrum faucibus orci sit amet blandit. Vestibulum id congue magna, ut bibendum nulla. Vivamus in lectus laoreet, imperdiet sem at, placerat erat. Morbi ut enim vel erat pulvinar dapibus a quis ex. In id libero urna. Nullam nec auctor lectus.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{IOHostURL}}/bugs",
									"host": [
										"{{IOHostURL}}"
									],
									"path": [
										"bugs"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{IO_ADMIN_TOKEN}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "Authorization",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response must be valid and have a body\", function () {",
					"     pm.response.to.be.ok;",
					"     pm.response.to.be.withBody;",
					"     pm.response.to.be.json;",
					"});"
				]
			}
		}
	]
}